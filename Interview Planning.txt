
----------------------------------
| STUDY WHERE MODIFICATIONS WENT!|
----------------------------------

Be prepared to describe your solution to the join/detach/exit synchronization problem.

(a) the join happens before the exit, 

(b) the detach happens before exit

(c) exit happens before join,

(d) exit happens before detach.

(e) Are there other possibilities? 



Questions about kill system call:
(1) What happens if you kill a zombie?

(2) What exit code is used bya  thread that exits because it was killed?

(3) What happens if a process waits (using the waitpid() system call)
	for a process that was the target of a kill() system call?

(4) Can a kernel thread use the same mechanism as the kill() system call
	to terminate another kernel thread?
	
(5) The "killtest" program forks a user-level process that executes an infinite
	loop and its parent issues a kill() system call to end it.
	Why does this work?
	
	Why does the process return userspace if it contains no code that enters
	the operating system?